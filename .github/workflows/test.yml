name: Flutter Tests & Coverage

on: 
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# 権限を明示的に設定
permissions:
  contents: write      # リポジトリへの書き込み権限（コミット用）
  pull-requests: write # PRへのコメント権限
  issues: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Run tests
      run: flutter test

  test-coverage:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          
      - name: Install lcov
        run: sudo apt-get update && sudo apt-get install -y lcov
        
      - name: Install dependencies
        run: flutter pub get
        
      - name: Analyze code
        run: flutter analyze
        
      - name: Format check
        run: dart format --set-exit-if-changed .
        
      - name: Run tests with coverage
        id: run-tests
        run: |
          flutter test --coverage --reporter=json > test-results.json || true
          flutter test --coverage --reporter=compact > test-results.txt || true
          echo "exit_code=$?" >> $GITHUB_OUTPUT
          
      - name: Generate coverage report
        if: always()
        run: |
          if [ -f coverage/lcov.info ]; then
            genhtml coverage/lcov.info -o coverage/html
          else
            echo "No coverage data found"
            mkdir -p coverage/html
            echo "<html><body><h1>No coverage data available</h1></body></html>" > coverage/html/index.html
          fi
          
      - name: Upload coverage to Codecov
        if: always() && steps.run-tests.outputs.exit_code == '0'
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: Upload coverage report as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/html/
          
      # docs/coverage に上書き（main/developブランチのみ）
      - name: Update coverage docs
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          rm -rf docs/coverage
          mv coverage/html docs/coverage

      # 変更があれば自動コミット＆Push（main/developブランチのみ）
      - name: Commit coverage report
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          git config --global user.name github-actions
          git config --global user.email actions@github.com
          git add docs/coverage
          git diff --staged --quiet || git commit -m "Update coverage report [skip ci]"
          git push
          
      - name: Create comment template
        run: |
          cat > comment-template.md << 'EOF'
          ## テスト結果
          
          $STATUS_ICON **テストステータス**: $STATUS_TEXT
          
          $TEST_SUMMARY
          $COVERAGE_INFO
          
          ### 実行されたチェック
          - [x] コード分析 (flutter analyze)
          - [x] フォーマットチェック (dart format)
          - $TEST_CHECKBOX 単体テスト (flutter test)
          - $COVERAGE_CHECKBOX カバレッジ測定
          
          $COVERAGE_SECTION
          
          ### テスト詳細
          ```
          $TEST_OUTPUT
          ```
          
          $FAILURE_MESSAGE
          
          ---
          *このコメントは自動生成されています*
          EOF
          
      - name: Comment test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // リポジトリ情報を明示的に取得
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issueNumber = context.issue.number;
            
            console.log(`Repository: ${owner}/${repo}`);
            console.log(`Issue Number: ${issueNumber}`);
            
            // テンプレートを読み込み
            let template = fs.readFileSync('comment-template.md', 'utf8');
            
            // テスト結果を読み取り
            let testOutput = '';
            try {
              testOutput = fs.readFileSync('test-results.txt', 'utf8');
            } catch (error) {
              testOutput = 'テスト結果ファイルが見つかりませんでした。';
            }
            
            // テスト成功/失敗を判定
            const testSuccess = '${{ steps.run-tests.outputs.exit_code }}' === '0';
            
            // JSON結果を解析
            let testSummary = '';
            try {
              const jsonResults = JSON.parse(fs.readFileSync('test-results.json', 'utf8'));
              const totalTests = jsonResults.length;
              const passedTests = jsonResults.filter(test => test.result === 'success').length;
              const failedTests = totalTests - passedTests;
              
              testSummary = `**テストサマリー**: ${passedTests}/${totalTests} テスト成功`;
              if (failedTests > 0) {
                testSummary += ` (${failedTests} 失敗)`;
              }
            } catch (error) {
              testSummary = '**テストサマリー**: 解析できませんでした';
            }
            
            // カバレッジ情報を取得（成功時のみ）
            let coverageInfo = '';
            let coverageSection = '';
            if (testSuccess) {
              try {
                const lcovContent = fs.readFileSync('coverage/lcov.info', 'utf8');
                const lines = lcovContent.split('\n');
                let totalLines = 0;
                let coveredLines = 0;
                
                lines.forEach(line => {
                  if (line.startsWith('SF:')) {
                    // ファイル開始
                  } else if (line.startsWith('LF:')) {
                    // 総行数
                    totalLines += parseInt(line.split(':')[1]);
                  } else if (line.startsWith('LH:')) {
                    // カバーされた行数
                    coveredLines += parseInt(line.split(':')[1]);
                  }
                });
                
                const coverage = totalLines > 0 ? ((coveredLines / totalLines) * 100).toFixed(2) : 0;
                coverageInfo = `**カバレッジ**: ${coverage}% (${coveredLines}/${totalLines} 行)`;
                coverageSection = `### カバレッジレポート
                カバレッジレポートは [Artifacts](https://github.com/${owner}/${repo}/actions/runs/${context.runId}) からダウンロードできます。`;
              } catch (error) {
                coverageInfo = '**カバレッジ**: 計算できませんでした';
              }
            }
            
            // 変数を置換
            const comment = template
              .replace(/\$STATUS_ICON/g, testSuccess ? '✅' : '⚠️')
              .replace(/\$STATUS_TEXT/g, testSuccess ? '成功' : '失敗')
              .replace(/\$TEST_SUMMARY/g, testSummary)
              .replace(/\$COVERAGE_INFO/g, coverageInfo)
              .replace(/\$TEST_CHECKBOX/g, testSuccess ? '[x]' : '[ ]')
              .replace(/\$COVERAGE_CHECKBOX/g, testSuccess ? '[x]' : '[ ]')
              .replace(/\$COVERAGE_SECTION/g, coverageSection)
              .replace(/\$TEST_OUTPUT/g, testOutput)
              .replace(/\$FAILURE_MESSAGE/g, testSuccess ? '' : '### 修正が必要\nテストが失敗しています。上記のエラーを確認して修正してください。');
            
            try {
              await github.rest.issues.createComment({
                owner: owner,
                repo: repo,
                issue_number: issueNumber,
                body: comment
              });
              console.log('Comment posted successfully');
            } catch (error) {
              console.error('Error posting comment:', error);
              console.error('Owner:', owner);
              console.error('Repo:', repo);
              console.error('Issue Number:', issueNumber);
            }